
package com.eli.calc.shape.apps;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.xml.namespace.QName;

import com.eli.calc.shape.service.ws.CalcType;
import com.eli.calc.shape.service.ws.CalculationRequest;
import com.eli.calc.shape.service.ws.CalculationResult;
import com.eli.calc.shape.service.ws.ShapeCalculatorWebService;
import com.eli.calc.shape.service.ws.ShapeName;
//import com.eli.calc.shape.service.ws.CalcTypesResponse;
//import com.eli.calc.shape.service.ws.ShapeNamesResponse;
import com.eli.calc.shape.service.ws.StatusCode;
import com.eli.calc.shape.service.ws.impl.ShapeCalculatorWebServiceImplService;

/**
 * This class was generated by Apache CXF 3.1.7
 * 2016-10-07T00:48:50.610-04:00
 * Generated source version: 3.1.7
 * 
 */
public final class ShapeCalculatorWebService_ShapeCalculatorWebServiceImplPort_Client {

    private static final QName SERVICE_NAME = new QName("http://impl.ws.service.shape.calc.eli.com/", "ShapeCalculatorWebServiceImplService");

    private final ShapeCalculatorWebService port;

    public ShapeCalculatorWebService_ShapeCalculatorWebServiceImplPort_Client(URL wsdlURL) {
   	

        ShapeCalculatorWebServiceImplService ss = new ShapeCalculatorWebServiceImplService(wsdlURL, SERVICE_NAME);
        port = ss.getShapeCalculatorWebServiceImplPort();  
 
    }

    public List<ShapeName> getShapeNames() {
 
    System.out.println("Invoking getShapeNames...");
    com.eli.calc.shape.service.ws.ShapeNamesResponse _getShapeNames__return = port.getShapeNames();

        checkForError(_getShapeNames__return);

        return _getShapeNames__return.getShapeNames();
    }
    
    public List<CalcType> getCalcTypes() {
 
    System.out.println("Invoking getCalcTypes...");
    com.eli.calc.shape.service.ws.CalcTypesResponse _getCalcTypes__return = port.getCalcTypes();

        checkForError(_getCalcTypes__return);

        return _getCalcTypes__return.getCalcTypes();
    }

    public void deletePendingRequests() {

        System.out.println("Invoking deletePendingRequests...");
 
        com.eli.calc.shape.service.ws.StatusResponse _deletePendingRequests__return = port.deletePendingRequests();

        checkForError(_deletePendingRequests__return);

    }
 
    public void deleteResults() {

        System.out.println("Invoking deleteResults...");

        com.eli.calc.shape.service.ws.StatusResponse _deleteResults__return = port.deleteResults();

        checkForError(_deleteResults__return);

    }
 
 
/*
    public Map<Integer,ShapeName> getShapeNames() {

        	System.out.println("Invoking getShapeNames...");
        	com.eli.calc.shape.service.ws.ShapeNamesResponse _getShapeNames__return = port.getShapeNames();

        	checkForError(_getShapeNames__return);

        	ShapeNamesResponse.ShapeNames names = _getShapeNames__return.getShapeNames();
        	List<ShapeNamesResponse.ShapeNames.Entry> entries = names.getEntry();
        	
        	Map<Integer,ShapeName> shapes = new HashMap<Integer,ShapeName>();
        	for (ShapeNamesResponse.ShapeNames.Entry e : entries) {
        		shapes.put(e.getKey(),e.getValue());
        	}

        	return shapes;
    }

    public Map<Integer,CalcType> getCalcTypes() {

        	System.out.println("Invoking getCalcTypesString...");
        	com.eli.calc.shape.service.ws.CalcTypesResponse _getCalcTypes__return = port.getCalcTypes();

        	checkForError(_getCalcTypes__return);

        	CalcTypesResponse.CalcTypes names = _getCalcTypes__return.getCalcTypes();
        	List<CalcTypesResponse.CalcTypes.Entry> entries = names.getEntry();

        	Map<Integer,CalcType> types = new HashMap<Integer,CalcType>();
        	for (CalcTypesResponse.CalcTypes.Entry e : entries) {
        		types.put(e.getKey(),e.getValue());
        	}

        	return types;
    }
*/

    public List<CalculationRequest> getPendingRequests() {

        	System.out.println("Invoking getPendingRequests...");

        	com.eli.calc.shape.service.ws.PendingRequestsResponse _getPendingRequests__return = port.getPendingRequests();

        	checkForError(_getPendingRequests__return);

        	List<CalculationRequest> pending = _getPendingRequests__return.getPendingRequests();

        	return pending;
    }


    public void queueCalculation(ShapeName shapeName, CalcType calcType, double dimension) {
    	
        System.out.println("Invoking queueCalculation...");
        com.eli.calc.shape.service.ws.QueueCalculationParms _queueCalculation_queueCalculationParms = 
        		new com.eli.calc.shape.service.ws.QueueCalculationParms();

        _queueCalculation_queueCalculationParms.setShapeName(shapeName);
        _queueCalculation_queueCalculationParms.setCalcType(calcType);
        _queueCalculation_queueCalculationParms.setDimension(dimension);

        com.eli.calc.shape.service.ws.StatusResponse _queueCalculation__return = 
        		port.queueCalculation(_queueCalculation_queueCalculationParms);

        checkForError(_queueCalculation__return);
    }

/*
    public void queueCalculationIndexed(int shapeName, int calcType, double dimension) {
    	
        System.out.println("Invoking queueCalculation...");
        com.eli.calc.shape.service.ws.QueueCalculationIndexedParms _queueCalculation_queueCalculationParms = 
        		new com.eli.calc.shape.service.ws.QueueCalculationIndexedParms();

        _queueCalculation_queueCalculationParms.setShapeName(shapeName);
        _queueCalculation_queueCalculationParms.setCalcType(calcType);
        _queueCalculation_queueCalculationParms.setDimension(dimension);

        com.eli.calc.shape.service.ws.StatusResponse _queueCalculation__return = 
        		port.queueCalculationIndexed(_queueCalculation_queueCalculationParms);

        checkForError(_queueCalculation__return);
    }
*/

    public List<CalculationResult> getCalculatedResults() {
 
        System.out.println("Invoking getCalculatedResults...");
        com.eli.calc.shape.service.ws.CalculatedResultsResponse _getCalculatedResults__return = port.getCalculatedResults();

        checkForError(_getCalculatedResults__return);

       	List<CalculationResult> results = _getCalculatedResults__return.getCalculatedResults();
       	
       	return results;
    }
    
    public int runPendingRequestsNoStopOnError() {

    	System.out.println("Invoking runPendingRequestsNoStopOnError...");
    	com.eli.calc.shape.service.ws.RunPendingRequestsResponse _runPendingRequestsNoStopOnError__return = 
    																				port.runPendingRequestsNoStopOnError();

    	checkForError(_runPendingRequestsNoStopOnError__return);
 
     	return _runPendingRequestsNoStopOnError__return.getNumRun();
    }

    public int runPendingRequestsStopOnError() {

    	System.out.println("Invoking runPendingRequestsStopOnError...");
    	com.eli.calc.shape.service.ws.RunPendingRequestsResponse _runPendingRequestsStopOnError__return = 
    																				port.runPendingRequestsNoStopOnError();

    	checkForError(_runPendingRequestsStopOnError__return);

     	return _runPendingRequestsStopOnError__return.getNumRun();
    }

    private void checkForError(com.eli.calc.shape.service.ws.StatusResponse response){

     	if (!response.getCode().equals(StatusCode.SUCCESS)) {
       		throw new RuntimeException("\n\n\n"
       				+"=====================================================\n"
       				+"Service Call returned error:\n"
       				+"description:"+response.getDescription()
       				+"\n\nerrMsg:"+response.getErrMsg()
       				+"\n\nclazz:"+response.getClazz()
       				+"\n=====================================================\n"
       				+"\n\n\n");
       	}
    	
    }
 
 
    public static void main(String args[]) throws java.lang.Exception {
        URL wsdlURL = ShapeCalculatorWebServiceImplService.WSDL_LOCATION;
        if (args.length > 0 && args[0] != null && !"".equals(args[0])) { 
            File wsdlFile = new File(args[0]);
            try {
                if (wsdlFile.exists()) {
                    wsdlURL = wsdlFile.toURI().toURL();
                } else {
                    wsdlURL = new URL(args[0]);
                }
            } catch (MalformedURLException e) {
                e.printStackTrace();
            }
        }
      
        new ShapeCalculatorWebService_ShapeCalculatorWebServiceImplPort_Client(wsdlURL);
        
 
/*
        {
        System.out.println("Invoking runPendingRequestsStopOnError...");
        com.eli.calc.shape.service.ws.RunPendingRequestsResponse _runPendingRequestsStopOnError__return = port.runPendingRequestsStopOnError();
        System.out.println("runPendingRequestsStopOnError.result=" + _runPendingRequestsStopOnError__return);


        }

*/
        System.exit(0);
    }

}
